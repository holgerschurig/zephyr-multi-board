#+AUTHOR: Holger Schurig
#+OPTIONS: ^:nil \n:t
#+MACRO: relref @@hugo:[@@ $1 @@hugo:]({{< relref "$2" >}})@@
#+HUGO_BASE_DIR: ~/src/hpg/

# Copyright (c) 2024 Holger Schurig
# SPDX-License-Identifier: Apache-2.0

* Zephyr: fixing LSP issues
:PROPERTIES:
:EXPORT_HUGO_SECTION: en
:EXPORT_FILE_NAME: en/zephyr-fixing-lsp-issues.md
:EXPORT_DATE: 2024-01-04
:EXPORT_HUGO_TAGS: zephyr make lsp clangd
:EXPORT_HUGO_CATEGORIES: embedded
:END:

Zephyr uses command-line arguments for GCC that the clangd LSP server doesn't
understand. Here I present one approach how to fix this.

#+hugo: more
#+toc: headlines 2

** What is LSP?

[[https://en.wikipedia.org/wiki/Language_Server_Protocol][LSP]] stands for "Language Server Protocol", a JSON based protocol where a tool
(e.g. a compiler) can tell an editor about language specific things *while*
editing, i.E. without an extra compilation step. It's also used for completion
of variable / function / method / type names in the editor. Or for
cross-references. As a real compiler looks at the code, it's quite precise. It
can achive much more insight into the code than using only parsing (e.g.
directly in the editor).

** Enable LSP

Out of the box, Zephyr doesn't support LSP, but it's easy enough to add. When
configuring for a board, you only need to ask CMake to create a compilation database:

#+begin_example -r
west build \
	--pristine \
	-b nucleo_f303re \
	-o "build.ninja" \
	-- \
	-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \               (ref:cdb)
	-DOVERLAY_CONFIG="nucleo_f303re.conf"
#+end_example

Here in line [[(ref:cdb)]] we do exactly that. Once you've compiled your project
normally, you'll now have such a compilation database in the "=build/="
directory:

#+begin_example
~/src/multi-board-zephyr$ ls -l build/compile_commands.json
-rw-r--r-- 1 holger holger 145793 Jan  5 08:40 build/compile_commands.json
#+end_example

This compilation database contains the exact set of source files that would be
compiled, as well as the full set of compiler command-line arguments for each
file. Therefore, an LSP daemon doesn't have to parse e.g. Makefile, meson.build,
the many CMake files etc etc etc. It just looks at this one formalized database.

** Use LSP in your editor

Since there are hundreds of editors out there, this is really beyond the scope
of this blog.

I personally use Emacs, and there are two options: lsp-mod and eglot. I use the latter.

On Linux, a good LSP server is [[https://clangd.llvm.org/][clangd]]. I currently use clangd-15, so I tell eglot about it:

#+begin_src elisp
  (add-to-list 'eglot-server-programs '(c-mode  .  ("clangd-15" "-j=2" "--clang-tidy")))
  (add-to-list 'eglot-server-programs '(c++-mode . ("clangd-15" "-j=2" "--clang-tidy")))
#+end_src

** Observing the first errors

... but oh no, even a miniature project already shows an error:

[[./2024-01-05_226x23.png]]

Note the "!!" in the left fringe.

But what are these errors?

[[./2024-01-05_733x74.png]]

It turns out that Zephyr uses some command line options that the GCC Compiler
understands. The CLANG compiler (when compiling) ignores them. But when we use
CLANG*D* (the daemon), this will be flagged as an error.

** Fixing these errors

Now, clangd takes all of the command line arguments from the compilation
database. So after configuring, we simply modify the compilation database
directly. So we define a Makefile target for this:

#+begin_example
.PHONY:: fix_lsp_compilation_database
fix_lsp_compilation_database:
	sed -i 's/--param=min-pagesize=0//g' build/compile_commands.json
	sed -i 's/--specs=picolibc.specs//g' build/compile_commands.json
	sed -i 's/-fno-defer-pop//g' build/compile_commands.json
	sed -i 's/-fno-freestanding//g' build/compile_commands.json
	sed -i 's/-fno-printf-return-value//g' build/compile_commands.json
	sed -i 's/-fno-reorder-functions//g' build/compile_commands.json
	sed -i 's/-mfp16-format=ieee//g' build/compile_commands.json
#+end_example

and call it directly after we configured for a specific board:

#+begin_example -r
local: .west/config
	west build \
		--pristine \
		-b local \
		-o "build.ninja" \
		-- \
		-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
		-DOVERLAY_CONFIG="boards/arm/local/local_defconfig" \
		-DBOARD_ROOT=.
	$(MAKE) --no-print-directory fix_lsp_compilation_database    (ref:fixlsp)
	west build
#+end_example

like this is done here in line [[(fixlsp)]].
